{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchChange","console","log","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","React","memo","color","useState","count","setCount","onClick","Header","App","searchField","useSelector","searchRobots","requestRobots","isPending","idPending","dispatch","useDispatch","useEffect","fetch","then","response","json","data","payload","catch","fiteredRobots","filter","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0032a74.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((robot, i) => {\r\n        return (\r\n          <Card\r\n            key={robot.id}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            email={robot.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  console.log(\"SearchBox\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"800px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops. That is not good</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { useState } from \"react\";\r\n\r\nconst CounterButton = React.memo(color => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const updateCount = () => {\r\n    setCount(count => {\r\n      return count + 1;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <button\r\n      style={{\r\n        color: { color }\r\n      }}\r\n      onClick={updateCount}\r\n    >\r\n      Count: {count}\r\n    </button>\r\n  );\r\n});\r\n\r\nexport default CounterButton;\r\n","import React from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\n\r\nconst Header = React.memo(() => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"f1\">RoboFriends</h1>\r\n      <CounterButton color={\"red\"} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Header;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from \"../components/Header\";\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\n// const mapStateToProps = state => {\r\n//   return {\r\n//     // searchField: state.searchRobots.searchField\r\n//     searchField: state.searchField\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     onSerchChange: event => dispatch(setSearchField(event.target.value))\r\n//   };\r\n// };\r\n\r\nconst App = () => {\r\n  // const [robots, setRobots] = useState([]);\r\n  const searchField = useSelector(state => state.searchRobots.searchField, []);\r\n  const robots = useSelector(state => state.requestRobots.robots, []);\r\n  const isPending = useSelector(state => state.requestRobots.idPending, []);\r\n  // const error = useSelector(state => state.requestRobots.error, []);\r\n\r\n  const dispatch = useDispatch();\r\n  // const [searchfield, setSerchfield] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then(response => response.json())\r\n    //   .then(users => setRobots(users));\r\n    dispatch(requestRobots());\r\n  }, [dispatch]);\r\n\r\n  const onSearchChange = event => {\r\n    dispatch(setSearchField(event.target.value));\r\n  };\r\n\r\n  const fiteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  });\r\n\r\n  // Header is unnecessary one of renders\r\n  return isPending ? (\r\n    <h1 className=\"tc\">Loading...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header />\r\n      <SearchBox searchChange={onSearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={fiteredRobots} />\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\"\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      // return { ...state, searchField: action.payload };\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}